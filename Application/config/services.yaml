# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/ {DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Shared\Infrastructure\Controller\:
        resource: '../src/Shared/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    App\Api\:
        resource: '../src/Api/*/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.team:
        class: App\BackOffice\Infrastructure\Admin\TeamAdmin
        arguments: [~, App\Api\Shared\Domain\Model\Team, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: General, label: Teams }

    admin.tournament:
        class: App\BackOffice\Infrastructure\Admin\TournamentAdmin
        arguments: [~, App\Api\Shared\Domain\Model\Tournament, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Pools, label: Tournaments }

    admin.group:
        class: App\BackOffice\Infrastructure\Admin\GroupAdmin
        arguments: [~, App\Api\Shared\Domain\Model\Group, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Pools, label: Tournament Groups }

    admin.tournament_phase:
        class: App\BackOffice\Infrastructure\Admin\TournamentPhaseAdmin
        arguments: [~, App\Api\Shared\Domain\Model\TournamentPhase, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Pools, label: 'Tournament Phases' }

    admin.tournament_pool:
        class: App\BackOffice\Infrastructure\Admin\TournamentPoolAdmin
        arguments: [~, App\Api\Shared\Domain\Model\TournamentPool, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Pools, label: 'Tournament Pools' }

    admin.user:
        class: App\BackOffice\Infrastructure\Admin\UserAdmin
        arguments: [~, App\Api\Shared\Domain\Model\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: General, label: 'Users' }

    admin.federation:
        class: App\BackOffice\Infrastructure\Admin\FederationAdmin
        arguments: [~, App\Api\Shared\Domain\Model\Federation, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: General, label: 'Federations' }

    admin.match:
        class: App\BackOffice\Infrastructure\Admin\MatchAdmin
        arguments: [~, App\Api\Shared\Domain\Model\Match, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Pools, label: 'Tournament Matches' }